source("family_selection.R")
# source("threshold.R")
source("sub-band_energy.R")
energija <- rbind(energija, t(sub_energy))
index <- rbind(index, best_index)
to = to+slide
from=from+slide
h=h+1
}
# plot.ts(index)#, type ='b')
# energija <- cbind(energija, index)
colnames(energija) <- NULL # set column names
rownames(energija) <- NULL # set column names
dim(energija)
categor <- data.frame()
# loop every slide
for(i in 1:length(energija[1,])) {
# classify energy values on one sub-band
test = data.frame(energija[,i]) #i
cat(i, '/', length(energija[1,]), '\n')
# perform classification
result <- LPCM::ms(
test,
scaled=T,
plotms=-1)
# assignment (labels)
LPCM_assignment <- result$cluster.label
# value
LPCM_value <- result$cluster.center[LPCM_assignment,]
# set labels for data
data <- cbind(test, LPCM_assignment)
colnames(data) <- c("value", "label")
rownames(data) = NULL
data = as.data.frame(data)
# plot data
plot(data$value, col = data$label, lwd =2, pch=data$label )
# add to categories data.frame
categor <- rbind(categor, data$label)
# Sys.sleep(0.2)
}
# write results
write.csv(categor, file = "../4_data/categor.csv")
rownames(categor)=NULL
colnames(categor)=NULL
dim(categor)
# calculate "mean" category value of one energy subset
mean_cat = round(colMeans(categor),2)
mean_cat = scale(as.data.frame(mean_cat))
plot.ts(mean_cat)
dim(mean_cat)
# perform classification of average energy categories
result <- LPCM::ms(
mean_cat,
scaled=F,
plotms=-1)
# assignment (labels)
LPCM_assignment <- result$cluster.label
# value
LPCM_value <- result$cluster.center[LPCM_assignment,]
# set labels for training data
data <- cbind(mean_cat, LPCM_assignment)
colnames(data) <- c("value", "label")
rownames(data) = NULL
data = as.data.frame(data)
plot(data$value, col = data$label, lwd =2, pch=data$label )
plot(data$label, col = data$label, lwd =2, pch=data$label )
# plot data
par(mfrow=c(2,1))
plot.ts(s_orig)
plot(data$label, col = data$label, lwd =2, pch=data$label )
d1 = rmatio::read.mat("../../data/VIBRO/data 1/healthy/H-D-2.mat")
s_orig = d
s_orig = d1
d1$Channel_1
d1$Channel_2
s_orig = d1$Channel_1
s_orig=signal::decimate(s_orig, 10 )
par(mfrow=c(1,1))
n=11 #15
from = 1
to = 2^n
dw = 2^n
slide = dw/2
s = s_orig[1:dw]
plot(Mod(fft(s)), type = 'h',xlim=c(0,dw/2))
quant <- quantile(Mod(fft(s)[1:1024]), 0.95)
max_fr = max(which(Mod(fft(s)[1:512]) > quant))
u=1
size = dw/2^(u-1)
while((size/2) > max_fr) {
u = u+1
size = dw/2^(u-1)
}
u=u-1
if(u==2){
u=u+1
}
u
#for vibration u=u+4
u = u+4
size = dw/2^(u-1)
cat(" Highest dominant harmonic: ", max_fr, '\n',
"Wavelet decomposition level: ", (u-1), '\n',
"Wavelet sub-bands number: ", 2^(u-1), '\n',
"Sub-band size: ", size, '\n',
"Data window size: ", dw, '\n',
"Slide: ", slide)
# calculate wavelet decomposition energy (u-th level)
source("energy_calculation.R")
par(mfrow=c(1,1))
# set data window parameters
n=11 #15
from = 1
to = 2^n
dw = 2^n
slide = dw/2
s = s_orig[1:dw]
plot(Mod(fft(s)), type = 'h',xlim=c(0,dw/2))
quant <- quantile(Mod(fft(s)[1:1024]), 0.95)
max_fr = max(which(Mod(fft(s)[1:512]) > quant))
u=1
size = dw/2^(u-1)
while((size/2) > max_fr) {
u = u+1
size = dw/2^(u-1)
}
u=u-1
if(u==2){
u=u+1
}
#for vibration u=u+4
u = u+3
size = dw/2^(u-1)
cat(" Highest dominant harmonic: ", max_fr, '\n',
"Wavelet decomposition level: ", (u-1), '\n',
"Wavelet sub-bands number: ", 2^(u-1), '\n',
"Sub-band size: ", size, '\n',
"Data window size: ", dw, '\n',
"Slide: ", slide)
# calculate wavelet decomposition energy (u-th level)
source("energy_calculation.R")
# cluster sub-band energy
source("sub-band_energy_clustering.R")
# mean category calculation
source("Mean_category.R")
# Final clustering results
source("energy_classification.R")
d1 = rmatio::read.mat("../../data/VIBRO/data 1/healthy/H-A-1.mat")
d2 = rmatio::read.mat("../../data/VIBRO/data 1/healthy/H-B-1.mat")
d = c(d1$Channel_1,
d2$Channel_1)
s_orig = d
s_orig=signal::decimate(s_orig, 10 )
par(mfrow=c(1,1))
# set data window parameters
n=11 #15
from = 1
to = 2^n
dw = 2^n
slide = dw/2
s = s_orig[1:dw]
plot(Mod(fft(s)), type = 'h',xlim=c(0,dw/2))
quant <- quantile(Mod(fft(s)[1:1024]), 0.95)
max_fr = max(which(Mod(fft(s)[1:512]) > quant))
u=1
size = dw/2^(u-1)
while((size/2) > max_fr) {
u = u+1
size = dw/2^(u-1)
}
u=u-1
if(u==2){
u=u+1
}
#for vibration u=u+4
u = u+3
size = dw/2^(u-1)
cat(" Highest dominant harmonic: ", max_fr, '\n',
"Wavelet decomposition level: ", (u-1), '\n',
"Wavelet sub-bands number: ", 2^(u-1), '\n',
"Sub-band size: ", size, '\n',
"Data window size: ", dw, '\n',
"Slide: ", slide)
# calculate wavelet decomposition energy (u-th level)
source("energy_calculation.R")
par(mfrow=c(1,1))
# set data window parameters
n=11 #15
from = 1
to = 2^n
dw = 2^n
slide = dw/2
s = s_orig[1:dw]
plot(Mod(fft(s)), type = 'h',xlim=c(0,dw/2))
quant <- quantile(Mod(fft(s)[1:1024]), 0.95)
max_fr = max(which(Mod(fft(s)[1:512]) > quant))
u=1
size = dw/2^(u-1)
while((size/2) > max_fr) {
u = u+1
size = dw/2^(u-1)
}
u=u-1
if(u==2){
u=u+1
}
#for vibration u=u+4
u = u+3
size = dw/2^(u-1)
cat(" Highest dominant harmonic: ", max_fr, '\n',
"Wavelet decomposition level: ", (u-1), '\n',
"Wavelet sub-bands number: ", 2^(u-1), '\n',
"Sub-band size: ", size, '\n',
"Data window size: ", dw, '\n',
"Slide: ", slide)
par(mfrow=c(1,1))
# set data window parameters
n=11 #15
from = 1
to = 2^n
dw = 2^n
slide = dw/2
s = s_orig[1:dw]
plot(Mod(fft(s)), type = 'h',xlim=c(0,dw/2))
quant <- quantile(Mod(fft(s)[1:1024]), 0.95)
max_fr = max(which(Mod(fft(s)[1:512]) > quant))
u=1
size = dw/2^(u-1)
while((size/2) > max_fr) {
u = u+1
size = dw/2^(u-1)
}
u=u-1
if(u==2){
u=u+1
}
#for vibration u=u+4
u = u+4
size = dw/2^(u-1)
cat(" Highest dominant harmonic: ", max_fr, '\n',
"Wavelet decomposition level: ", (u-1), '\n',
"Wavelet sub-bands number: ", 2^(u-1), '\n',
"Sub-band size: ", size, '\n',
"Data window size: ", dw, '\n',
"Slide: ", slide)
par(mfrow=c(1,1))
# set data window parameters
n=11 #15
from = 1
to = 2^n
dw = 2^n
slide = dw/2
s = s_orig[1:dw]
plot(Mod(fft(s)), type = 'h',xlim=c(0,dw/2))
quant <- quantile(Mod(fft(s)[1:1024]), 0.95)
max_fr = max(which(Mod(fft(s)[1:512]) > quant))
u=1
size = dw/2^(u-1)
while((size/2) > max_fr) {
u = u+1
size = dw/2^(u-1)
}
u=u-1
if(u==2){
u=u+1
}
#for vibration u=u+4
u = u+3
size = dw/2^(u-1)
cat(" Highest dominant harmonic: ", max_fr, '\n',
"Wavelet decomposition level: ", (u-1), '\n',
"Wavelet sub-bands number: ", 2^(u-1), '\n',
"Sub-band size: ", size, '\n',
"Data window size: ", dw, '\n',
"Slide: ", slide)
par(mfrow=c(1,1))
# set data window parameters
n=11 #15
from = 1
to = 2^n
dw = 2^n
slide = dw/2
s = s_orig[1:dw]
plot(Mod(fft(s)), type = 'h',xlim=c(0,dw/2))
quant <- quantile(Mod(fft(s)[1:1024]), 0.95)
max_fr = max(which(Mod(fft(s)[1:512]) > quant))
u=1
size = dw/2^(u-1)
while((size/2) > max_fr) {
u = u+1
size = dw/2^(u-1)
}
u=u-1
if(u==2){
u=u+1
}
#for vibration u=u+4
u = u+4
size = dw/2^(u-1)
cat(" Highest dominant harmonic: ", max_fr, '\n',
"Wavelet decomposition level: ", (u-1), '\n',
"Wavelet sub-bands number: ", 2^(u-1), '\n',
"Sub-band size: ", size, '\n',
"Data window size: ", dw, '\n',
"Slide: ", slide)
# calculate wavelet decomposition energy (u-th level)
source("energy_calculation.R")
# cluster sub-band energy
source("sub-band_energy_clustering.R")
# mean category calculation
source("Mean_category.R")
# Final clustering results
source("energy_classification.R")
#### LOAD DATA ####
#read wav file
audio = "signal_1" # change "signal_1" to save different graphs
name = "../../data/audio/akmenys.wav" # audio signal name
graph = FALSE # plot original signal? TRUE/FALSE
source('read_audio.R')
#### WAVELET PARAMETERS ####
# select wavelet decomposition level
vibration = F # set T for vibration data
source("wavelet_parameters_selection.R")
#### ENERGY CALCULATION ####
# calculate wavelet decomposition energy (u-th level)
source("energy_calculation.R")
# cluster sub-band energy
source("sub-band_energy_clustering.R")
# mean category calculation
source("Mean_category.R")
#### CLUSTERING ####
# Final clustering results
source("energy_classification.R")
name = "../../data/audio/chainsaw.wav" # audio signal name
graph = FALSE # plot original signal? TRUE/FALSE
source('read_audio.R')
# load user functions
source("user-functions.R")
#### WAVELET PARAMETERS ####
# select wavelet decomposition level
vibration = F # set T for vibration data
source("wavelet_parameters_selection.R")
#### ENERGY CALCULATION ####
# calculate wavelet decomposition energy (u-th level)
source("energy_calculation.R")
n=11 #15
from = 1
to = 2^n
dw = 2^n
slide = dw/2
s = s_orig[1:dw]
plot(Mod(fft(s)), type = 'h',xlim=c(0,dw/2))
quant <- quantile(Mod(fft(s)[1:1024]), 0.95)
max_fr = max(which(Mod(fft(s)[1:512]) > quant))
u=1
size = dw/2^(u-1)
while((size/2) > max_fr) {
u = u+1
size = dw/2^(u-1)
}
u=u-1
if(u==2){
u=u+1
}
cat(" Highest dominant harmonic: ", max_fr, '\n',
"Wavelet decomposition level: ", (u-1), '\n',
"Wavelet sub-bands number: ", 2^(u-1), '\n',
"Sub-band size: ", size, '\n',
"Data window size: ", dw, '\n',
"Slide: ", slide)
#for vibration u=u+4
if(vibration ==T){
u = u+4
size = dw/2^(u-1)
}
cat(" Highest dominant harmonic: ", max_fr, '\n',
"Wavelet decomposition level: ", (u-1), '\n',
"Wavelet sub-bands number: ", 2^(u-1), '\n',
"Sub-band size: ", size, '\n',
"Data window size: ", dw, '\n',
"Slide: ", slide)
# cluster sub-band energy
source("sub-band_energy_clustering.R")
# mean category calculation
source("Mean_category.R")
#### CLUSTERING ####
# Final clustering results
source("energy_classification.R")
rm(list=ls())
#### LOAD DATA ####
#read wav file
vibration = F # set T for vibration data
audio = "signal_1" # change "signal_1" to save different graphs
name = "../../data/audio/chainsaw.wav" # audio signal name
graph = FALSE # plot original signal? TRUE/FALSE
source('read_audio.R')
# read vibration data
source("read_vibro.R")
rm(list=ls())
#### LOAD DATA ####
#read wav file
vibration = F # set T for vibration data
audio = "signal_1" # change "signal_1" to save different graphs
name = "../../data/audio/chainsaw.wav" # audio signal name
graph = FALSE # plot original signal? TRUE/FALSE
source('read_audio.R')
# load user functions
source("user-functions.R")
# load user functions
source("user-functions.R")
rm(list=ls())
#### LOAD DATA ####
#read wav file
vibration = F # set T for vibration data
audio = "signal_1" # change "signal_1" to save different graphs
name = "../../data/audio/chainsaw.wav" # audio signal name
graph = FALSE # plot original signal? TRUE/FALSE
source('read_audio.R')
# load user functions
source("user-functions.R")
# User functions:
source("features_function.R")
rm(list=ls())
#### LOAD DATA ####
#read wav file
vibration = F # set T for vibration data
audio = "signal_1" # change "signal_1" to save different graphs
name = "../../data/audio/chainsaw.wav" # audio signal name
graph = FALSE # plot original signal? TRUE/FALSE
source('read_audio.R')
# load user functions
source("user-functions.R")
rm(list=ls())
# load user functions
source("user-functions.R")
#read wav file
vibration = F # set T for vibration data
audio = "signal_1" # change "signal_1" to save different graphs
name = "../../data/audio/chainsaw.wav" # audio signal name
graph = FALSE # plot original signal? TRUE/FALSE
source('read_audio.R')
#### WAVELET PARAMETERS ####
# select wavelet decomposition level
source("wavelet_parameters_selection.R")
cat('\n', 'categories saved as categor.csv', '\n'
, "sub-band energy clustering DONE!")
cat('\n', 'categories saved as categor.csv', '\n',
"------------------------", '\n'
, "sub-band energy clustering DONE!")
cat('\n', 'categories saved as categor.csv', '\n',
"---------------------------", '\n'
, "sub-band energy clustering DONE!")
cat('\n', 'categories saved as categor.csv', '\n',
"-------------------------", '\n'
, "sub-band energy clustering DONE!")
cat('\n', 'categories saved as categor.csv', '\n',
"----------------------------", '\n'
, "sub-band energy clustering DONE!")
cat('\n', 'categories saved as categor.csv', '\n',
"----------------------------------", '\n'
, "sub-band energy clustering DONE!")
cat('\n', 'categories saved as categor.csv', '\n',
"--------------------------------", '\n'
, "sub-band energy clustering DONE!")
# calculate "mean" category value of one energy subset
mean_cat = round(colMeans(categor),2)
mean_cat = scale(as.data.frame(mean_cat))
plot(mean_cat, type = 'h', ylab="mean category", main = "Mean category over slide")
#### CLUSTERING ####
# Final clustering results
source("energy_classification.R")
#read wav file
vibration = F # set T for vibration data
# load user functions
source("user-functions.R")
#read wav file
vibration = F # set T for vibration data
audio = "signal_1" # change "signal_1" to save different graphs
name = "../../data/audio/graztas.wav" # audio signal name
graph = FALSE # plot original signal? TRUE/FALSE
source('read_audio.R')
#### WAVELET PARAMETERS ####
# select wavelet decomposition level
source("wavelet_parameters_selection.R")
#### ENERGY CALCULATION ####
# calculate wavelet decomposition energy (u-th level)
source("energy_calculation.R")
cat('\n', 'energies saved as energy.csv',
'--------------------------------','\n'
'\n', "sub-band energy calculatoin DONE!")
cat('\n', 'energies saved as energy.csv',
'--------------------------------','\n',
'\n', "sub-band energy calculatoin DONE!")
cat('\n', 'energies saved as energy.csv',
'\n','--------------------------------',
'\n', "sub-band energy calculatoin DONE!")
cat('\n', 'energies saved as energy.csv',
'\n','------------------------------',
'\n', "sub-band energy calculatoin DONE!")
cat('\n', 'energies saved as energy.csv',
'\n','-------------------------------',
'\n', "sub-band energy calculatoin DONE!")
cat('\n', 'energies saved as energy.csv',
'\n','--------------------------------',
'\n', "sub-band energy calculatoin DONE!")
# cluster sub-band energy
source("sub-band_energy_clustering.R")
# mean category calculation
source("Mean_category.R")
#### CLUSTERING ####
# Final clustering results
source("energy_classification.R")
