#
# energija <- rbind(energija, statistics_function(detail_coeff))
statistika <- rbind(statistika, statistics_function(detail_coeff))
#
# source("sub-band_energy.R")
# energija <- rbind(energija, t(sub_energy))
to = to+slide
from=from+slide
}
head(statistika)
plot.ts(statistika$zero_crossing)
# User functions:
source("features_function.R")
## Normalize data using Min Max (exclude NA values)
normalize <-
function(x, na.rm = TRUE) {
ranx <- range(x, na.rm = na.rm)
(x - ranx[1]) / diff(ranx)
}
# call: normalize(x)
#### sub-band energy calculation function ####
nodes <- function(wp, level, node, calculate = T ){
# get node coefficients
nodes <- getpacket.wp(wp, level = level, index = node)
if(calculate == T){
# if sub - band length is greater or equal to 8, calculate energy
# if(length(nodes)/2 >= 8){
# W <- getpacket.wp(wp, level = level, index = node)
sum(abs(nodes)^2)
# }
# print error if lenght is less
# else{cat(" Error! \n Max freq we can detect in this node is:\t"
#          ,length(getpacket.wp(s_wp, level = level, index = node))/2, "Hz" )}
} else {return(nodes)}
}
#### zero crossing number function ####
zero_cross <- function(signal){
up_down <- c(0, diff(sign(signal)))
ix <- which(up_down != 0)
return(length(ix))
}
##### mean crossing number function ####
# signal = s
mean_cross <- function(signal){
up_down <- c(0, diff(sign(mean(signal) - signal)))
ix <- which(up_down != 0)
return(length(ix))
}
##### percentils functino ####
percentils <- function(signal, prob){
percentil <- data.frame(quantile(signal, probs = c(prob)))
colnames(percentil) = NULL
percentil <- percentil[,1]
return(percentil)
}
#### statistics #####
statistics_function <- function(signal){
data.frame(
# signal_length = length(signal),
# n5 = round(percentils(signal, 0.05), 2),
# n25 = round(percentils(signal, 0.25), 2),
# n75 = round(percentils(signal, 0.75), 2),
# n95 = round(percentils(signal, 0.95), 2),
# median = round(median(signal), 2),
mean = round(mean(signal), 2),
sd = round(sd(signal), 2),
energie = sum(abs(signal)^2),
# variance = round(var(signal), 2),
kurtosis = round(e1071::kurtosis(signal), 2),
skewness = round(e1071::skewness(signal), 2),
rms = round(mean(sqrt(signal^2)), 2), # root mean squared value
# zero_crossing = zero_cross(signal),
entropy = entropy::entropy.ChaoShen(signal)
# mean_crossing = mean_cross(signal)
)
}
# set data window parameters
from = 1
to = 2^12
dw= 4096
slide = dw/4
# Empty table for statistics
statistika <- data.frame()
# decomposition level
l = 8 # detail coefficients number = 2^l
while((to+slide) <= length(s_orig)) {
s <- s_orig[from:to]
s_dwt <- wavethresh::wd(s)
#
detail_coeff <- accessD(s_dwt, level = l) # detail coeff
#
# energija <- rbind(energija, statistics_function(detail_coeff))
statistika <- rbind(statistika, statistics_function(detail_coeff))
#
# source("sub-band_energy.R")
# energija <- rbind(energija, t(sub_energy))
to = to+slide
from=from+slide
}
head(statistika)
plot.ts(statistika$zero_crossing)
# write energy to csv
# write.csv(statistika, file = "statistika.csv")
head(statistika)
plot.ts(statistika$sd)
plot.ts(statistika$energie)
plot.ts(statistika$kurtosis)
plot.ts(statistika$skewness)
plot.ts(statistika$rms)
plot.ts(statistika$entropy)
plot.ts(statistika$rms)
# setwd("../data/2nd_test")
s <- data.frame()
for(i in 700:length(file_names)) {
print(i)
data = read.table(paste0("../data/2nd_test/",file_names[i]))[,1]
s <- as.numeric(c(s, data))
}
s_orig = s
# set data window parameters
from = 1
to = 2^12
dw= 4096
slide = dw/4
# Empty table for statistics
statistika <- data.frame()
# decomposition level
l = 8 # detail coefficients number = 2^l
while((to+slide) <= length(s_orig)) {
s <- s_orig[from:to]
s_dwt <- wavethresh::wd(s)
#
detail_coeff <- accessD(s_dwt, level = l) # detail coeff
#
# energija <- rbind(energija, statistics_function(detail_coeff))
statistika <- rbind(statistika, statistics_function(detail_coeff))
#
# source("sub-band_energy.R")
# energija <- rbind(energija, t(sub_energy))
to = to+slide
from=from+slide
}
head(statistika)
plot.ts(statistika$rms)
# write energy to csv
# write.csv(statistika, file = "statistika.csv")
plot.ts(statistika$sd)
plot.ts(statistika$entropy)
plot.ts(statistika$kurtosis)
plot.ts(statistika$skewness)
plot.ts(statistika$energie)
plot.ts(statistika$kurtosis)
head(statistika)
atstumas <- dist(statistika)
atstumas
atstumas <- dist(round(statistika,2))
class(as.matrix(atstumas))
write.csv(as.matrix(atstumas), 'stat_dist.csv')
# setwd("../data/2nd_test")
s <- data.frame()
for(i in 880:length(file_names)) {
print(i)
data = read.table(paste0("../data/2nd_test/",file_names[i]))[,1]
s <- as.numeric(c(s, data))
}
s_orig = s
# set data window parameters
from = 1
to = 2^12
dw= 4096
slide = dw/4
# Empty table for statistics
statistika <- data.frame()
# decomposition level
l = 8 # detail coefficients number = 2^l
while((to+slide) <= length(s_orig)) {
s <- s_orig[from:to]
s_dwt <- wavethresh::wd(s)
#
detail_coeff <- accessD(s_dwt, level = l) # detail coeff
#
# energija <- rbind(energija, statistics_function(detail_coeff))
statistika <- rbind(statistika, statistics_function(detail_coeff))
#
# source("sub-band_energy.R")
# energija <- rbind(energija, t(sub_energy))
to = to+slide
from=from+slide
}
head(statistika)
plot.ts(statistika$kurtosis)
# write energy to csv
# write.csv(statistika, file = "statistika.csv")
atstumas <- dist(round(statistika,2))
write.csv(as.matrix(atstumas), 'stat_dist.csv')
# User functions:
source("features_function.R")
## Normalize data using Min Max (exclude NA values)
normalize <-
function(x, na.rm = TRUE) {
ranx <- range(x, na.rm = na.rm)
(x - ranx[1]) / diff(ranx)
}
# call: normalize(x)
#### sub-band energy calculation function ####
nodes <- function(wp, level, node, calculate = T ){
# get node coefficients
nodes <- getpacket.wp(wp, level = level, index = node)
if(calculate == T){
# if sub - band length is greater or equal to 8, calculate energy
# if(length(nodes)/2 >= 8){
# W <- getpacket.wp(wp, level = level, index = node)
sum(abs(nodes)^2)
# }
# print error if lenght is less
# else{cat(" Error! \n Max freq we can detect in this node is:\t"
#          ,length(getpacket.wp(s_wp, level = level, index = node))/2, "Hz" )}
} else {return(nodes)}
}
#### zero crossing number function ####
zero_cross <- function(signal){
up_down <- c(0, diff(sign(signal)))
ix <- which(up_down != 0)
return(length(ix))
}
##### mean crossing number function ####
# signal = s
mean_cross <- function(signal){
up_down <- c(0, diff(sign(mean(signal) - signal)))
ix <- which(up_down != 0)
return(length(ix))
}
##### percentils functino ####
percentils <- function(signal, prob){
percentil <- data.frame(quantile(signal, probs = c(prob)))
colnames(percentil) = NULL
percentil <- percentil[,1]
return(percentil)
}
#### statistics #####
statistics_function <- function(signal){
data.frame(
# signal_length = length(signal),
# n5 = round(percentils(signal, 0.05), 2),
# n25 = round(percentils(signal, 0.25), 2),
# n75 = round(percentils(signal, 0.75), 2),
# n95 = round(percentils(signal, 0.95), 2),
# median = round(median(signal), 2),
# mean = round(mean(signal), 2),
# sd = round(sd(signal), 2),
energie = sum(abs(signal)^2),
# variance = round(var(signal), 2),
kurtosis = round(e1071::kurtosis(signal), 2),
skewness = round(e1071::skewness(signal), 2),
rms = round(mean(sqrt(signal^2)), 2), # root mean squared value
# zero_crossing = zero_cross(signal),
entropy = entropy::entropy.ChaoShen(signal)
# mean_crossing = mean_cross(signal)
)
}
# set data window parameters
from = 1
to = 2^12
dw= 4096
slide = dw/4
# Empty table for statistics
statistika <- data.frame()
# decomposition level
l = 8 # detail coefficients number = 2^l
while((to+slide) <= length(s_orig)) {
s <- s_orig[from:to]
s_dwt <- wavethresh::wd(s)
#
detail_coeff <- accessD(s_dwt, level = l) # detail coeff
#
# energija <- rbind(energija, statistics_function(detail_coeff))
statistika <- rbind(statistika, statistics_function(detail_coeff))
#
# source("sub-band_energy.R")
# energija <- rbind(energija, t(sub_energy))
to = to+slide
from=from+slide
}
head(statistika)
plot.ts(statistika$kurtosis)
# write energy to csv
# write.csv(statistika, file = "statistika.csv")
atstumas <- dist(round(statistika,2))
write.csv(as.matrix(atstumas), 'stat_dist.csv')
head(statistika)
plot.ts(statistika$energie)
plot.ts(statistika$skewness)
plot.ts(statistika$kurtosis)
# set data window parameters
from = 1
to = 2^12
dw= 4096
slide = dw/4
# Empty table for statistics
statistika <- data.frame()
# decomposition level
l = 8 # detail coefficients number = 2^l
while((to+slide) <= length(s_orig)) {
s <- s_orig[from:to]
s_dwt <- wavethresh::wd(s)
#
detail_coeff <- accessD(s_dwt, level = l) # detail coeff
#
# energija <- rbind(energija, statistics_function(detail_coeff))
statistika <- rbind(statistika, statistics_function(detail_coeff))
#
# source("sub-band_energy.R")
# energija <- rbind(energija, t(sub_energy))
to = to+slide
from=from+slide
}
head(statistika)
plot.ts(statistika$kurtosis)
# write energy to csv
# write.csv(statistika, file = "statistika.csv")
atstumas <- dist(round(statistika,2))
write.csv(as.matrix(atstumas), 'stat_dist.csv')
# User functions:
source("features_function.R")
## Normalize data using Min Max (exclude NA values)
normalize <-
function(x, na.rm = TRUE) {
ranx <- range(x, na.rm = na.rm)
(x - ranx[1]) / diff(ranx)
}
# call: normalize(x)
#### sub-band energy calculation function ####
nodes <- function(wp, level, node, calculate = T ){
# get node coefficients
nodes <- getpacket.wp(wp, level = level, index = node)
if(calculate == T){
# if sub - band length is greater or equal to 8, calculate energy
# if(length(nodes)/2 >= 8){
# W <- getpacket.wp(wp, level = level, index = node)
sum(abs(nodes)^2)
# }
# print error if lenght is less
# else{cat(" Error! \n Max freq we can detect in this node is:\t"
#          ,length(getpacket.wp(s_wp, level = level, index = node))/2, "Hz" )}
} else {return(nodes)}
}
#### zero crossing number function ####
zero_cross <- function(signal){
up_down <- c(0, diff(sign(signal)))
ix <- which(up_down != 0)
return(length(ix))
}
##### mean crossing number function ####
# signal = s
mean_cross <- function(signal){
up_down <- c(0, diff(sign(mean(signal) - signal)))
ix <- which(up_down != 0)
return(length(ix))
}
##### percentils functino ####
percentils <- function(signal, prob){
percentil <- data.frame(quantile(signal, probs = c(prob)))
colnames(percentil) = NULL
percentil <- percentil[,1]
return(percentil)
}
#### statistics #####
statistics_function <- function(signal){
data.frame(
# signal_length = length(signal),
# n5 = round(percentils(signal, 0.05), 2),
# n25 = round(percentils(signal, 0.25), 2),
# n75 = round(percentils(signal, 0.75), 2),
# n95 = round(percentils(signal, 0.95), 2),
# median = round(median(signal), 2),
# mean = round(mean(signal), 2),
# sd = round(sd(signal), 2),
# energie = sum(abs(signal)^2),
# variance = round(var(signal), 2),
kurtosis = round(e1071::kurtosis(signal), 2),
skewness = round(e1071::skewness(signal), 2),
rms = round(mean(sqrt(signal^2)), 2), # root mean squared value
# zero_crossing = zero_cross(signal),
entropy = entropy::entropy.ChaoShen(signal)
# mean_crossing = mean_cross(signal)
)
}
# setwd("../data/2nd_test")
s <- data.frame()
for(i in 920:length(file_names)) {
print(i)
data = read.table(paste0("../data/2nd_test/",file_names[i]))[,1]
s <- as.numeric(c(s, data))
}
s_orig = s
# set data window parameters
from = 1
to = 2^12
dw= 4096
slide = dw/4
# Empty table for statistics
statistika <- data.frame()
# decomposition level
l = 8 # detail coefficients number = 2^l
while((to+slide) <= length(s_orig)) {
s <- s_orig[from:to]
s_dwt <- wavethresh::wd(s)
#
detail_coeff <- accessD(s_dwt, level = l) # detail coeff
#
# energija <- rbind(energija, statistics_function(detail_coeff))
statistika <- rbind(statistika, statistics_function(detail_coeff))
#
# source("sub-band_energy.R")
# energija <- rbind(energija, t(sub_energy))
to = to+slide
from=from+slide
}
head(statistika)
plot.ts(statistika$kurtosis)
# write energy to csv
# write.csv(statistika, file = "statistika.csv")
atstumas <- dist(round(statistika,2))
write.csv(as.matrix(atstumas), 'stat_dist.csv')
head(statistika)
atstumas <- round(dist(statistika),2)
write.csv(as.matrix(atstumas), 'stat_dist.csv')
# setwd("../data/2nd_test")
s <- data.frame()
for(i in 945:length(file_names)) {
print(i)
data = read.table(paste0("../data/2nd_test/",file_names[i]))[,1]
s <- as.numeric(c(s, data))
}
s_orig = s
# set data window parameters
from = 1
to = 2^12
dw= 4096
slide = dw/4
# Empty table for statistics
statistika <- data.frame()
# decomposition level
l = 8 # detail coefficients number = 2^l
while((to+slide) <= length(s_orig)) {
s <- s_orig[from:to]
s_dwt <- wavethresh::wd(s)
#
detail_coeff <- accessD(s_dwt, level = l) # detail coeff
#
# energija <- rbind(energija, statistics_function(detail_coeff))
statistika <- rbind(statistika, statistics_function(detail_coeff))
#
# source("sub-band_energy.R")
# energija <- rbind(energija, t(sub_energy))
to = to+slide
from=from+slide
}
head(statistika)
plot.ts(statistika$kurtosis)
# write energy to csv
# write.csv(statistika, file = "statistika.csv")
atstumas <- round(dist(statistika),2)
write.csv(as.matrix(atstumas), 'stat_dist.csv')
# setwd("../data/2nd_test")
s <- data.frame()
for(i in 955:length(file_names)) {
print(i)
data = read.table(paste0("../data/2nd_test/",file_names[i]))[,1]
s <- as.numeric(c(s, data))
}
s_orig = s
# set data window parameters
from = 1
to = 2^12
dw= 4096
slide = dw/4
# Empty table for statistics
statistika <- data.frame()
# decomposition level
l = 8 # detail coefficients number = 2^l
while((to+slide) <= length(s_orig)) {
s <- s_orig[from:to]
s_dwt <- wavethresh::wd(s)
#
detail_coeff <- accessD(s_dwt, level = l) # detail coeff
#
# energija <- rbind(energija, statistics_function(detail_coeff))
statistika <- rbind(statistika, statistics_function(detail_coeff))
#
# source("sub-band_energy.R")
# energija <- rbind(energija, t(sub_energy))
to = to+slide
from=from+slide
}
head(statistika)
plot.ts(statistika$kurtosis)
# write energy to csv
# write.csv(statistika, file = "statistika.csv")
atstumas <- round(dist(statistika),2)
write.csv(as.matrix(atstumas), 'stat_dist.csv')
atstumas <- normalize(round(dist(statistika),2))
atstumas <- round(normalize(dist(statistika)),2)
write.csv(as.matrix(atstumas), 'stat_dist.csv')
atstumas <- round(normalize(dist(statistika)),4)
write.csv(as.matrix(atstumas), 'stat_dist.csv')
atstumas <- round(normalize(dist(statistika)),4)*100
atstumas <- round(normalize(dist(statistika)),4)*100
write.csv(as.matrix(atstumas), 'stat_dist.csv')
# Choose distance method
method = "euclidean" # "maximum", "manhattan", "canberra", "binary", "minkowski"
atstumas <- round(normalize(dist(statistika, method = method)),4)*100
